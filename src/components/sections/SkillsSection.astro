---
import ReactIcon from "../../assets/icons/react.svg";
import NextjsIcon from "../../assets/icons/next-js.svg";
import AngularIcon from "../../assets/icons/angular.svg";
import AstroIcon from "../../assets/icons/astro.svg";
import NodejsIcon from "../../assets/icons/node-js.svg";
import TailwindIcon from "../../assets/icons/tailwind.svg";
import TypescriptIcon from "../../assets/icons/typescript.svg";
import NestjsIcon from "../../assets/icons/nest-js.svg";
import CommunicationIcon from "../../assets/icons/communication.svg";
import ProblemSolvingIcon from "../../assets/icons/problem-solving.svg";
import CreativityIcon from "../../assets/icons/creativity.svg";
import TeamworkIcon from "../../assets/icons/teamwork.svg";
import AdaptabilityIcon from "../../assets/icons/adaptability.svg";

import HardSkillItem from "../ui/HardSkillItem.astro";
import SoftSkillItem from "../ui/SoftSkillItem.astro";

const hardSkills = [
  { name: "React", icon: ReactIcon, level: 90 },
  { name: "Angular", icon: AngularIcon, level: 85 },
  { name: "Next.js", icon: NextjsIcon, level: 88 },
  { name: "Astro", icon: AstroIcon, level: 80 },
  { name: "Node.js", icon: NodejsIcon, level: 85 },
  { name: "NestJS", icon: NestjsIcon, level: 82 },
  { name: "Tailwind", icon: TailwindIcon, level: 95 },
  { name: "TypeScript", icon: TypescriptIcon, level: 87 },
];

const softSkills = [
  { name: "Communication", icon: CommunicationIcon, level: 92 },
  { name: "Problem Solving", icon: ProblemSolvingIcon, level: 95 },
  { name: "Creativity", icon: CreativityIcon, level: 88 },
  { name: "Teamwork", icon: TeamworkIcon, level: 90 },
  { name: "Adaptability", icon: AdaptabilityIcon, level: 93 },
];
---

<section
  id="skills"
  class="section-padding animate-on-scroll"
  aria-labelledby="skills-heading"
>
  <div class="container-custom">
    <div class="text-center mb-16">
      <h2
        id="skills-heading"
        class="heading-lg text-white poppins-semibold mb-4"
      >
        Skills
      </h2>
      <div
        class="w-24 h-1 bg-gradient-to-r from-emerald-400 to-blue-500 mx-auto rounded-full"
      >
      </div>
      <p
        class="text-slate-400 text-lg mt-6 max-w-2xl mx-auto montserrat-regular"
      >
        Tecnologies and competences that I master to create exceptional
        solutions
      </p>
    </div>

    <div class="space-y-20">
      <!-- Hard Skills -->
      <article>
        <header class="text-center mb-12">
          <h3 class="heading-md text-white poppins-semibold mb-4">
            Hard Skills
          </h3>
          <div class="w-16 h-0.5 bg-emerald-400 mx-auto rounded-full"></div>
        </header>

        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 stagger-animation"
        >
          {
            hardSkills.map((skill, index) => (
              <HardSkillItem
                name={skill.name}
                level={skill.level}
                icon={skill.icon}
              />
            ))
          }
        </div>
      </article>

      <!-- Soft Skills -->
      <article>
        <header class="text-center mb-12">
          <h3 class="heading-md text-white poppins-semibold mb-4">
            Soft Skills
          </h3>
          <div class="w-16 h-0.5 bg-blue-400 mx-auto rounded-full"></div>
        </header>

        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-8 stagger-animation"
        >
          {
            softSkills.map((skill, index) => (
              <SoftSkillItem
                index={index}
                name={skill.name}
                level={skill.level}
                icon={skill.icon}
              />
            ))
          }
        </div>
      </article>
    </div>
  </div>
</section>

<style>
  .invert {
    filter: invert(100%) grayscale(100%);
  }
</style>

<script>
  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    const skillsSection = document.getElementById("skills");
    if (!skillsSection) return;

    // Function to set progress bars to their final state without animation
    const setStaticProgressBars = (target: HTMLElement) => {
      const progressBars = target.querySelectorAll(".progress-bar");
      progressBars.forEach((bar) => {
        if (!(bar instanceof HTMLElement)) return;
        const percentage = bar.getAttribute("data-percentage");
        if (percentage) {
          // Set width directly without transition
          bar.style.transition = 'none';
          bar.style.width = `${percentage}%`;
        }
      });
    };

    // Function to animate progress bars
    const animateProgressBars = (target: HTMLElement) => {
      const progressBars = target.querySelectorAll(".progress-bar");
      let animationSupported = true;

      // Test if CSS transitions are supported
      const testElement = document.createElement('div');
      if (typeof testElement.style.transition === 'undefined') {
        animationSupported = false;
      }

      progressBars.forEach((bar, index) => {
        if (!(bar instanceof HTMLElement)) return;
        const percentage = bar.getAttribute("data-percentage");
        if (!percentage) return;

        if (!animationSupported) {
          // If animation is not supported, set width directly
          bar.style.width = `${percentage}%`;
          return;
        }


        // Animate after a delay based on index
        setTimeout(() => {
          requestAnimationFrame(() => {
            bar.style.transition = "width 1s ease-in-out";
            bar.style.width = `${percentage}%`;
          });
        }, index * 100);
      });
    };

    // Check if IntersectionObserver is supported
    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animateProgressBars(entry.target as HTMLElement);
              observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.3,
          rootMargin: "0px 0px -50px 0px",
        }
      );

      observer.observe(skillsSection);
    } else {
      // Fallback for browsers that don't support IntersectionObserver
      // Set static progress bars without animation
      setStaticProgressBars(skillsSection);
    }
  });
</script>
