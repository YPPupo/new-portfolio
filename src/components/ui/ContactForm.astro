---
export const prerender = false;
---

<form
  id="contact-form"
  class="glass-effect rounded-xl p-8 border border-slate-700/50 bg-gradient-to-br from-slate-800/50 to-slate-900/50 space-y-6"
  novalidate
  aria-label="Contact form"
>
  <div class="space-y-2">
    <label for="name" class="block text-white poppins-medium text-sm">
      Name <span class="text-red-400" aria-label="required field">*</span>
    </label>
    <input
      type="text"
      name="name"
      id="name"
      required
      aria-required="true"
      class="contact-input w-full px-4 py-3 rounded-lg bg-slate-700/50 border border-slate-600 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 transition-all duration-200"
      placeholder="Your full name"
    />
    <p class="text-red-400 hidden text-xs mt-1" id="name-error" role="alert"></p>
  </div>

  <div class="space-y-2">
    <label for="email" class="block text-white poppins-medium text-sm">
      Email <span class="text-red-400" aria-label="required field">*</span>
    </label>
    <input
      type="email"
      name="email"
      id="email"
      required
      aria-required="true"
      class="contact-input w-full px-4 py-3 rounded-lg bg-slate-700/50 border border-slate-600 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 transition-all duration-200"
      placeholder="your.email@example.com"
    />
    <p class="text-red-400 hidden text-xs mt-1" id="email-error" role="alert"></p>
  </div>

  <div class="space-y-2">
    <label for="message" class="block text-white poppins-medium text-sm">
      Message <span class="text-red-400" aria-label="required field">*</span>
    </label>
    <textarea
      name="message"
      id="message"
      rows="5"
      required
      aria-required="true"
      class="contact-input w-full px-4 py-3 rounded-lg bg-slate-700/50 border border-slate-600 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 transition-all duration-200 resize-none"
      placeholder="Tell me about your project or idea..."></textarea>
    <p class="text-red-400 hidden text-xs mt-1" id="message-error" role="alert"></p>
  </div>

  <p
    id="success-message"
    class="mb-4 hidden rounded bg-emerald-600/30 p-3 text-emerald-200"
    role="alert"
  >
    ¡Mensaje enviado con éxito!
  </p>

  <button
    type="submit"
    class="w-full bg-emerald-500 hover:bg-emerald-600 text-white px-8 py-4 rounded-lg font-medium transition-all duration-200 hover:scale-105 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-offset-2 focus:ring-offset-transparent magnetic-btn enhanced-hover ripple disabled:opacity-50 disabled:cursor-not-allowed"
  >
    Send Message
  </button>
</form>

<style>
  /* Professional form validation styling */
  /* Only show invalid styles for touched/dirty fields */
  .contact-input:invalid[data-touched="true"] {
    border-color: rgb(248 113 113);
    box-shadow: 0 0 0 2px rgb(248 113 113 / 0.5);
  }

  /* Valid styles for touched fields */
  .contact-input:valid[data-touched="true"]:not(:placeholder-shown) {
    border-color: rgb(52 211 153 / 0.5);
  }

  /* Alternative CSS-only approach using :user-invalid (modern browsers) */
  @supports selector(:user-invalid) {
    .contact-input:user-invalid {
      border-color: rgb(248 113 113);
      box-shadow: 0 0 0 2px rgb(248 113 113 / 0.5);
    }
  }

  /* Smooth transitions for validation states */
  .contact-input {
    transition-property: border-color, box-shadow, background-color;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 200ms;
  }

  /* Focus styles override validation styles */
  .contact-input:focus {
    border-color: rgb(52 211 153);
    box-shadow: 0 0 0 2px rgb(52 211 153);
    outline: none;
  }
</style>

<script>
  import { actions } from "astro:actions";

  const form = document.getElementById("contact-form") as HTMLFormElement;
  const inputs = form?.querySelectorAll('.contact-input') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;

  // Track touched state for each input
  function markAsTouched(input: HTMLInputElement | HTMLTextAreaElement) {
    input.setAttribute('data-touched', 'true');
  }

  // Set up touched state tracking
  inputs?.forEach(input => {
    // Mark as touched on first interaction
    input.addEventListener('blur', () => markAsTouched(input), { once: false });
    input.addEventListener('input', () => markAsTouched(input), { once: true });
  });

  // Real-time validation feedback for touched fields
  function validateField(input: HTMLInputElement | HTMLTextAreaElement) {
    const isTouched = input.getAttribute('data-touched') === 'true';
    const errorElement = document.getElementById(`${input.name}-error`);
    
    if (isTouched && !input.validity.valid) {
      errorElement?.classList.remove('hidden');
      errorElement?.setAttribute('aria-live', 'polite');
      
      // Set appropriate error message
      if (input.validity.valueMissing) {
        errorElement!.textContent = `${input.name.charAt(0).toUpperCase() + input.name.slice(1)} is required.`;
      } else if (input.validity.typeMismatch && input.type === 'email') {
        errorElement!.textContent = 'Please enter a valid email address.';
      } else {
        errorElement!.textContent = 'This field is invalid.';
      }
    } else {
      errorElement?.classList.add('hidden');
      errorElement?.removeAttribute('aria-live');
    }
  }

  // Add real-time validation
  inputs?.forEach(input => {
    input.addEventListener('input', () => validateField(input));
    input.addEventListener('blur', () => validateField(input));
  });

  // Form submission handler
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    
    // Mark all fields as touched on submit attempt
    inputs?.forEach(input => {
      markAsTouched(input);
      validateField(input);
    });

    // Check if form is valid
    if (!form.checkValidity()) {
      // Focus on first invalid field
      const firstInvalid = form.querySelector('.contact-input:invalid') as HTMLElement;
      firstInvalid?.focus();
      return;
    }

    const fd = new FormData(form);
    const payload = Object.fromEntries(fd.entries());

    try {
      const result = await actions.contact({
        name: payload.name.toString(),
        email: payload.email.toString(),
        message: payload.message.toString(),
      });

      if (result?.data?.success) {
        const successMessage = document.getElementById("success-message");
        successMessage?.classList.remove("hidden");

        setTimeout(() => {
          successMessage?.classList.add("hidden");
        }, 3000);

        // Reset form and clear touched states
        form.reset();
        inputs?.forEach(input => {
          input.removeAttribute('data-touched');
          const errorElement = document.getElementById(`${input.name}-error`);
          errorElement?.classList.add('hidden');
        });
      } else {
        // Handle server-side validation errors
        if (result?.error) {
          console.error('Form submission error:', result.error);
          // You can enhance this to show specific server errors
        }
      }
    } catch (error) {
      console.error('Network error:', error);
      // Handle network errors gracefully
    }
  });
</script>
